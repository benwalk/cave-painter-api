service: cave-painter-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  serverless-offline:
    port: 4000
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}

  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-orders
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}

  # RDS configuration
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  environment: ${file(env.yml):${self:provider.stage}}

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-west-2
  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}

  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:DescribeTable
  #       - dynamodb:Query
  #       - dynamodb:Scan
  #       - dynamodb:GetItem
  #       - dynamodb:PutItem
  #       - dynamodb:UpdateItem
  #       - dynamodb:DeleteItem
  #     # Restrict our IAM role permissions to
  #     # the specific table for the stage
  #     Resource:
  #       - "Fn::GetAtt": [ OrdersTable, Arn ]

# Create and wire up Lambda functions
functions:
  graphql:
    handler: graphql/handler.graphqlHandler
    events:
    - http:
        path: graphql
        method: post
        cors: true
    - http:
        path: graphql
        method: get

  # playground:
  #   handler: graphql/handler.playgroundHandler
  #   events:
  #     - http:
  #         path: playground
  #         method: get
  #         cors: true


# Create our resources with separate CloudFormation templates
resources:
  # RDS
  # - ${file(resources/postgres-table-coffee.yml)}
  # - ${file(resources/postgres-table-orders.yml)}
  - ${file(resources/dynamodb-table-orders.yml)}
  # - ${file(resources/dynamodb-table-coffee.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  # IAM
  - ${file(resources/iam-dynamo-roles.yml)}
